{
  "name": "grunt-jade-usemin",
  "version": "0.10.2",
  "description": "Grunt plugin for running usemin on Jade files",
  "repository": {
    "type": "git",
    "url": "git://github.com/pgilad/grunt-jade-usemin"
  },
  "license": "MIT",
  "author": {
    "name": "Gilad Peleg",
    "email": "giladp007@gmail.com",
    "url": "http://giladpeleg.com"
  },
  "files": [
    "tasks"
  ],
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "keywords": [
    "gruntplugin",
    "jade",
    "usemin",
    "build",
    "minify",
    "assets",
    "filerev"
  ],
  "dependencies": {
    "grunt-contrib-concat": "^0.5.0",
    "grunt-contrib-cssmin": "^0.10.0",
    "grunt-contrib-uglify": "^0.6.0",
    "lodash": "^2.4.1",
    "slash": "^1.0.0"
  },
  "devDependencies": {
    "grunt-autoprefixer": "^1.0.1",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-copy": "^0.7.0",
    "grunt-contrib-nodeunit": "^0.4.1",
    "grunt-dev-update": "^1.0.1",
    "grunt-filerev": "^2.1.1",
    "load-grunt-tasks": "^1.0.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.4"
  },
  "contributors": [
    {
      "name": "Pavol Pitonak",
      "url": "https://github.com/ppitonak"
    }
  ],
  "readme": "# [grunt](http://gruntjs.com/)-jade-usemin\n> Grunt plugin for processing jade files and building production js & css files\n\n[![NPM Version](http://img.shields.io/npm/v/grunt-jade-usemin.svg?style=flat)](https://npmjs.org/package/grunt-jade-usemin)\n[![NPM Downloads](http://img.shields.io/npm/dm/grunt-jade-usemin.svg?style=flat)](https://npmjs.org/package/grunt-jade-usemin)\n[![Build Status](http://img.shields.io/travis/pgilad/grunt-jade-usemin/master.svg?style=flat)](https://travis-ci.org/pgilad/grunt-jade-usemin)\n[![Built with Grunt](http://img.shields.io/badge/BUILT_WITH-GRUNT-orange.svg?style=flat)](http://gruntjs.com/)\n\n## Getting Started\nThis plugin requires Grunt.\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install --save-dev grunt-jade-usemin\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of Javascript:\n\n```js\ngrunt.loadNpmTasks('grunt-jade-usemin');\n```\n\n## The \"jadeUsemin\" task\n\nThis project is based on the [grunt-usemin](https://github.com/yeoman/grunt-usemin) Project.\n`grunt-jade-usemin` is meant to be an assisting tool in preparing projects for build.\n\nThe steps of this plugin are as follows:\n\n1. Scan **src** jade files.\n2. Locate **build blocks** defined by `<!-- build:type(alternate path) target -->`.\n3. Gather **css** and **js** files in build blocks and run them through defined tasks for each filetype.\n4. Optionally output an optimized jade with with only targets to replace the build block.\n\nCurrently only 2 types of build blocks are supported: `css` and `js`.\n\n**jadeUsemin** also:\n\n- Writes optimized jade files\n- You choose which tasks to run for each filetype.\n\nFor example use `grunt-filerev` to add cache-busting to scripts/css.\n\n### Usage\n\n**For more usage examples head on to the [examples](examples/examples.md) section.**\n\n#### Basic Example\n\nTo simply use the task, define your build blocks like so:\n```jade\n//-<!-- build:js public/js/scripts.min.js -->\nscript(src='./src/js/script1.js')\nscript(src='./src/js/script2.js')\n//-<!-- endbuild -->\n\n//-<!-- build:css test/compiled/style.min.css -->\nlink(rel='stylesheet', href='/test/fixtures/style1.css')\nlink(rel='stylesheet', href='/test/fixtures/style2.css')\n//-<!-- endbuild -->\n```\n\nThen you need to define `grunt-jade-usemin` as a task in your `grunt config`.\nYou can use the following setup to process the above pattern:\n\n```js\n//...\njadeUsemin: {\n    scripts: {\n        options: {\n            tasks: {\n                js: ['concat', 'uglify'],\n                css: ['concat', 'cssmin']\n            }\n        },\n        files: [{\n            dest: './src/partials/index.jade',\n            src: './public/partials/index.jade'\n        }]\n    }\n}\n//...\n```\n\nRunning `grunt jadeUsemin:scripts` will now concat and uglify `script1.js` and `script2.js`\nand output them as `public/js/scripts.min.js`. This will also output an optimized jade file\nthat will remove the build block and contain:\n\n```jade\nscript(src='public/js/scripts.min.js')\n```\n\n\n#### Optimized Jade Files\n\nWriting target jade files is optional. `jadeUsemin` is smart enough that if you don't specify\na target for your src jade files, it won't output a jade file. This is useful if you are working on\nserver side jade files that build blocks still need to be optimized.\n\nIn your grunt configuration you need to configure a destination file (see: [grunt files](http://gruntjs.com/configuring-tasks#files)).\n\nThen if your `src` jade file is:\n\n```jade\n//-<!-- build:css test/compiled/style.min.css -->\nlink(rel='stylesheet', href='/test/fixtures/style1.css')\nlink(rel='stylesheet', href='/test/fixtures/style2.css')\n//-<!-- endbuild -->\n```\n\nYour target jade file will turn into:\n\n```jade\nlink(rel='stylesheet', href='test/compiled/style.min.css')\n```\n\n**Note:** in order to create the optimized target, `grunt-jade-usemin` takes the first src in the relevant build block found and uses that as a template\n\n## API\n\n### Build blocks\n\nBuild blocks have a strict design, so that they may be correctly caught by the regex.\n\n```jade\n<!-- build:type(alternate path) target -->\n<!-- endbuild -->\n```\n\n- Build blocks must be all of the same type (or filetype).\n- You can have as many different build blocks in the same file.\n- Currently only supported blocks are of `js` or `css` types.\n- If writing an optimized jade file, it uses the pattern of the first item to insert optimized script.\n- **alternate path** is **optional** (along with the parenthesis). If used this task will also try\nto find the script/css src files in the alternate path.\n\n### Grunt Task\n\nTasks are *configurable* and *run in the order you specify*.\nThis gives you great flexibility in choosing which and how to run tasks on your build blocks.\n\nThe main task you need to define is called `jadeUsemin`.\n\nBesides specifying the files object, you can use the following options:\n\n#### Tasks\n\nThis is an array of objects, where `key=filetype` and value is an array of tasks to be run in order.\n\n*Default* value is:\n\n```js\ntasks: {\n    js: ['concat', 'uglify'],\n    css: ['concat', 'cssmin']\n}\n```\n\nIn order to allow you to configure your tasks, `jadeUsemin` looks in the following places,\nwhich are ordered by precedence:\n\n1. `task.jadeUsemin.options`. For example: `uglify.jadeUsemin.options`.\n2. `task.options`. For example: `uglify.options`.\n3. Predefined default options for task if they exists.\n\nThis will allow you to control the options with which your tasks are being run on the build blocks.\n\nPlease note that the first task in each filetype runs against the original src files, and writes\nthe destination target file. All the rest of the tasks in the context of the filetype run on the\ndestination file.\n\n**So basically saying - it makes the most sense to run `concat` first on the build blocks.**\n\n##### Example usage with [grunt-autoprefixer](https://github.com/nDmitry/grunt-autoprefixer)\n\n```js\ntasks: {\n    js: ['concat', 'uglify'],\n    css: ['concat', 'autoprefixer', 'cssmin']\n}\n```\n\n#### dirTasks\n\nType: `string[]|string`\nDefault: `null`\n\nIf you have tasks that require a directory as destination (i.e [grunt-filerev](https://github.com/yeoman/grunt-filerev))\nthan you can use the `dirTasks` option to specify those in an array or string.\n\nExample:\n```js\ndirTasks: ['filerev']\n// or dirTasks: 'filerev'\n```\n\nThis will parse the destination target as a directory, and not a file.\n\n**important note** - If you use this option for any task, please make sure it is the last task that runs for a file type,\nas it will output a file with different name as the original target.\n\n#### Prefix\n**String** `Default: ''`\n\nThis adds some flexibility to where you keep your public folder. It\nallows you to add a prefix to the path.\n\n#### targetPrefix\n**String** `Default: ''`\n\nSame as the `prefix` but used for target location. If you specify a string here it will be prefixed\nto the output of the target file.\n\n#### replacePath\n **Object** `Default: {}`\n\nThis option allows you to specify interpolation patterns for the source and build paths of your js/css.\nEach key value you specify here will be interpolated in the src paths that the plugin finds.\nFor example if you add: `'#{env}': 'dist'` then all occurrences of `#{env}` in src paths will be replaced with `dist`.\nThis gives you the power to change the paths according to different working environments.\n\n#### Gruntfile.js full example\nIn your project's Gruntfile, add a section named `jadeUsemin` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  jadeUsemin: {\n    main: {\n      options: {\n        tasks: { //optional if you want to use defaults\n            js: ['concat', 'uglify', 'filerev'],\n            css: ['concat', 'autoprefixer', 'cssmin']\n        },\n        dirTasks: 'filerev', //optional\n        prefix: '',          //optional\n        targetPrefix: '',    //optional\n        replacePath: {       //optional\n            '#{env}': 'dist'\n        }\n      },\n      files: [{\n        src: ['src/index.jade', 'src/index2.jade']\n      },{\n        src: ['src/index.jade'],\n        dest: 'dist/index.jade'\n     }]\n    }\n  },\n})\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Contributors\n\n- Pavol Pitonak [https://github.com/ppitonak](https://github.com/ppitonak)\n\n## License\n\nMIT @[Gilad Peleg](http://giladpeleg.com)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pgilad/grunt-jade-usemin/issues"
  },
  "homepage": "https://github.com/pgilad/grunt-jade-usemin",
  "_id": "grunt-jade-usemin@0.10.2",
  "_from": "grunt-jade-usemin@^0.10.2"
}
