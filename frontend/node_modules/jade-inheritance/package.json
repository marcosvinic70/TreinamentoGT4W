{
  "name": "jade-inheritance",
  "description": "Determine the inheritance of Jade templates.",
  "url": "https://github.com/paulyoung/jade-inheritance",
  "keywords": [
    "jade"
  ],
  "version": "0.1.0",
  "bin": {
    "jade-inheritance": "./bin/jade-inheritance"
  },
  "main": "./lib/index",
  "engines": {
    "node": ">=0.8.x"
  },
  "dependencies": {
    "colors": "0.6.2",
    "commander": "1.2.0",
    "glob": "3.2.6",
    "jade": "~0.34.1"
  },
  "devDependencies": {
    "coffee-script": "1.6.3"
  },
  "scripts": {
    "build": "cake build"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/paulyoung/jade-inheritance.git"
  },
  "readme": "# jade-inheritance\nReduce compilation time for [Jade](https://github.com/visionmedia/jade) files by understanding inheritance.\n\n## The problem\nWhen a Jade template is modified, there is no way of knowing how that change has affected the rest of a project. Other files that have extended or included the modified file also need to be compiled.\n\nAs a result, common practice is to compile **all** template files to ensure that everything is up to date. This does not bode well for rapid development since files are unnecessarily being compiled and this can take a long time on a large project or if the use of inheritance and mixins is pervasive.\n\n## The solution\nUse `jade-inheritance` to determine which files in a project extend and include modified files, and only compile those that are affected.\n\n## An example\n```javascript\nvar JadeInheritance = require('jade-inheritance');\nvar inheritance = new JadeInheritance('foo.jade');\n```\n\n### Inheritance tree\n```javascript\nconsole.log(inheritance.tree);\n```\n\nOutput:\n```json\n{\n  \"foo.jade\": {\n    \"extendedBy\": {\n      \"bar.jade\": {\n        \"includedBy\": {\n          \"baz.jade\": {}\n        }\n      }\n    },\n    \"extendedBy\": {\n      \"qux.jade\": {}\n    }\n  }\n}\n```\n\n### Dependant files\n```javascript\nconsole.log(inheritance.files);\n```\n\nOutput:\n```json\n[\n  \"foo.jade\",\n  \"bar.jade\",\n  \"baz.jade\",\n  \"qux.jade\"\n]\n```\n\n### Integration with [grunt-contrib-jade](https://github.com/gruntjs/grunt-contrib-jade)\n```javascript\n// Gruntfile.js\ngrunt.initConfig({\n  watch: {\n    jade: {\n      files: [\n        'app/**/*.jade'\n      ],\n      tasks: [\n        'jade:compile'\n      ],\n      nospawn: true\n    }\n  },\n  jade: {\n    compile: {\n      options: {\n        basedir: 'app',\n        pretty: true\n      },\n      files: [{\n        expand: true,\n        src: 'app/**/*.jade',\n        dest: 'assets/',\n        ext: '.html'\n      }]\n    }\n  }\n});\n\n\nvar JadeInheritance = require('jade-inheritance');\nvar changedFiles = [];\n\nvar onChange = grunt.util._.debounce(function() {\n  var options = grunt.config('jade.compile.options');\n  var dependantFiles = [];\n\n  files.forEach(function(filename) {\n    var directory = options.basedir;\n    var inheritance = new JadeInheritance(filename, directory, options);\n    dependantFiles = dependantFiles.concat(inheritance.files);\n  });\n\n  var config = grunt.config('jade.compile.files')[0];\n  config.src = dependantFiles;\n  grunt.config('jade.compile.files', [config]);\n\n  changedFiles = [];\n}, 200)\n\ngrunt.event.on('watch', function(action, filepath) {\n  changedFiles.push(filepath);\n  onChange();\n});\n```\n\n## Installation\n```sh\n$ npm install -g jade-inheritance\n```\n\n## Command line usage\n```sh\n$ jade-inheritance --help\n```\n\n## Development\n### Build\n```sh\n$ npm run-script build\n```\n\n## Possible concerns\nCurrently, `jade-inheritance` depends on its own version of Jade to parse templates. Since `jade-inheritance` does not offer compilation, this must be done using other tools which may use a different version of Jade.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/paulyoung/jade-inheritance/issues"
  },
  "homepage": "https://github.com/paulyoung/jade-inheritance",
  "_id": "jade-inheritance@0.1.0",
  "_from": "jade-inheritance@^0.1.0"
}
